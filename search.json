[{"path":"https://robinhankin.github.io/spray/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor covenant code of conduct","title":"Contributor covenant code of conduct","text":"members, contributors, leaders wish make participation community pleasant productive experience everyone. try act interact ways contribute open, welcoming, inclusive, healthy community. assume good faith, per WP:AGF. Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people Communicating respectfully differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community","code":""},{"path":"https://robinhankin.github.io/spray/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to spray","title":"Contributing to spray","text":"Thank considering contributing spray! appreciate interest making project better. Please read adhere Code Conduct maintain safe, welcoming, inclusive environment. Various forms contributions welcome: Bug Reports: Feel free report bugs encounter. Documentation: Typos, clarity issues, missing guides: help welcome . Feature Discussions/Requests: Got idea? Open issue discuss potential. Code Contributions: code contributions welcome. Tests checks run CI, however locally one can use: devtools::test(). Ideally change documented. Major changes vignettes.","code":""},{"path":"https://robinhankin.github.io/spray/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer.","code":""},{"path":"https://robinhankin.github.io/spray/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin RK (????). spray: Sparse Arrays Multivariate Polynomials. R package version 1.0-26, https://robinhankin.github.io/spray/, https://github.com/RobinHankin/spray. Hankin RK (2022). “Sparse arrays R: spray package.” doi:10.48550/ARXIV.2210.10848.","code":"@Manual{,   title = {spray: Sparse Arrays and Multivariate Polynomials},   author = {Robin K. S. Hankin},   note = {R package version 1.0-26, https://robinhankin.github.io/spray/},   url = {https://github.com/RobinHankin/spray}, } @Misc{,   title = {Sparse arrays in R: the spray package},   author = {Robin K. S. Hankin},   year = {2022},   publisher = {arXiv},   doi = {10.48550/ARXIV.2210.10848}, }"},{"path":[]},{"path":[]},{"path":"https://robinhankin.github.io/spray/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Sparse Arrays and Multivariate Polynomials","text":"spray package provides functionality sparse arrays. sparse arrays, nonzero elements stored along index vector describing coordinates. spray package provides functionality sparse arrays interprets multivariate polynomials.","code":""},{"path":"https://robinhankin.github.io/spray/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sparse Arrays and Multivariate Polynomials","text":"can install released version spray CRAN :","code":"# install.packages(\"spray\")  # uncomment this to install the package library(\"spray\")"},{"path":"https://robinhankin.github.io/spray/index.html","id":"the-spray-package-in-use","dir":"","previous_headings":"","what":"The spray package in use","title":"Sparse Arrays and Multivariate Polynomials","text":"Base R extensive support multidimensional arrays. Consider Handling requires storage  floating point numbers (two nonzero), represented elegant format amenable extraction replacement. Arrays many elements zero common case storing nonzero elements positions compact efficient representation. create sparse array object spray package, one specifies matrix indices row corresponding position nonzero element, numeric vector values: Note object S1 rather compact comparison plain array , needs record 18-element index array integers two double-precision entries. order elements stored implementation-specific (see vignette details extended discussion). Basic arithmetic implemented appropriate. define (entry value 8 cancelled ).","code":"a <- array(0,dim=4:12) a[2,2,2,2,2,2,2,2,2] <- 17 a[3,4,2,2,7,2,3,2,3] <- 18 library(\"spray\") M <- rbind(   c(2,2,2,2,2,2,2,2,2),   c(3,4,2,2,7,2,3,2,3))  S1 <- spray(M,7:8) S1 #>                        val #>  3 4 2 2 7 2 3 2 3  =    8 #>  2 2 2 2 2 2 2 2 2  =    7 S2 <-spray(rbind(   c(1,2,3,1,3,3,1,4,1),   c(3,4,2,2,7,2,3,2,3)), c(100,-8)) S2 #>                        val #>  3 4 2 2 7 2 3 2 3  =   -8 #>  1 2 3 1 3 3 1 4 1  =  100 S1+S2 #>                        val #>  2 2 2 2 2 2 2 2 2  =    7 #>  1 2 3 1 3 3 1 4 1  =  100"},{"path":"https://robinhankin.github.io/spray/index.html","id":"the-spray-package-and-multivariate-polynomials","dir":"","previous_headings":"","what":"The spray package and multivariate polynomials","title":"Sparse Arrays and Multivariate Polynomials","text":"One natural application spray objects multivariate polynomials. Defining natural interpret rows index matrix powers different variables multivariate polynomial, values coefficients. realised package using polyform print option, set TRUE, modifies print method: (print method changed; objects unaltered). print method interprets, default, three columns variables  although behaviour user-definable. interpretation, multiplication addition natural definitions multivariate polynomial multiplication addition: possible introduce element symbolic calculation, exhibiting familiar algebraic identities. Consider lone() function, creates sparse array whose multivariate polynomial interpretation single variable: thus illustrating identity . Spray objects can coerced functions: Differentiation also straightforward. Suppose wish calculate multivariate polynomial corresponding package vignette offers detailed discussion package design philosophy; also, mvp package provides interpretation concept “sparse” context multivariate polynomials.","code":"S1 <- spray(matrix(c(0,0,0,1,0,0,1,1,1,2,0,3),ncol=3),1:4) S2 <- spray(matrix(c(6,-7,8,0,0,2,1,1,3),byrow=TRUE,ncol=3),c(17,11,-4)) S1 #>            val #>  1 1 3  =    4 #>  0 0 2  =    2 #>  0 1 0  =    3 #>  0 0 1  =    1 S2 #>             val #>  1  1 3  =   -4 #>  0  0 2  =   11 #>  6 -7 8  =   17 options(polyform = TRUE) S1 #> +4*x*y*z^3 +2*z^2 +3*y +z S2 #> -4*x*y*z^3 +11*z^2 +17*x^6*y^-7*z^8 S1+S2 #> +13*z^2 +3*y +z +17*x^6*y^-7*z^8 S1*S2 #> +17*x^6*y^-7*z^9 +11*z^3 +51*x^6*y^-6*z^8 +34*x^6*y^-7*z^10 -4*x*y*z^4 #> +33*y*z^2 -12*x*y^2*z^3 +22*z^4 +36*x*y*z^5 +68*x^7*y^-6*z^11 #> -16*x^2*y^2*z^6 S1^2+4*S2 #> +8*x*y*z^4 +9*y^2 +68*x^6*y^-7*z^8 +24*x*y^2*z^3 -16*x*y*z^3 #> +16*x*y*z^5 +45*z^2 +16*x^2*y^2*z^6 +4*z^3 +12*y*z^2 +4*z^4 +6*y*z x <- lone(1, 3) y <- lone(2, 3) z <- lone(3, 3) (x + y) * (y + z) * (x + z) - (x + y + z) * (x*y + x*z + y*z) #> -x*y*z S4 <- spray(cbind(1:3, 3:1), 1:3) f <- as.function(S4) f(c(1, 2)) #>  X  #> 22 aderiv((xyz(3) + linear(1:3))^3, 1:3) #> +216*x +108*x^2*y"},{"path":"https://robinhankin.github.io/spray/reference/Extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or Replace Parts of a spray — Extract.spray","title":"Extract or Replace Parts of a spray — Extract.spray","text":"Extract replace subsets sprays.","code":""},{"path":"https://robinhankin.github.io/spray/reference/Extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or Replace Parts of a spray — Extract.spray","text":"","code":"# S3 method for class 'spray' S[..., drop = FALSE] # S3 method for class 'spray' S[index, ...] <- value"},{"path":"https://robinhankin.github.io/spray/reference/Extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or Replace Parts of a spray — Extract.spray","text":"S spray object index elements extract replace value replacement value ... arguments drop Boolean, default FALSE  meaning return     spray object TRUE meaning drop spray structure     return numeric vector","code":""},{"path":"https://robinhankin.github.io/spray/reference/Extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or Replace Parts of a spray — Extract.spray","text":"methods work expected, although --one issue   might gotcha.  disordR discipline enforced   appropriate. S[index,...], argument drop FALSE   default, case spray object returned.    drop TRUE numeric vector returned, elements   corresponding rows index.  Compare coeffs(S),   returns disord object; S[index,drop=TRUE],   rows index specify unique order return value. <- spray(diag(3)), example, idiom   [c(1,2,3)] work, one like [1,2,3]   [1:3,2,3] work. p <- 1:3, one might expect idiom   S[1,,p,1:3] work problematic discussion   given inst/missing_accessor.txt. Functions spray_extract_disord()   spray_replace_disord() low-level helper functions   implement idiom [coeffs() < 3] anda[coeffs() <   3] <- 99.","code":""},{"path":"https://robinhankin.github.io/spray/reference/Extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or Replace Parts of a spray — Extract.spray","text":"","code":"(a <- spray(diag(5))) #>                val #>  0 0 0 0 1  =    1 #>  0 0 0 1 0  =    1 #>  0 0 1 0 0  =    1 #>  0 1 0 0 0  =    1 #>  1 0 0 0 0  =    1 a[rbind(rep(1,5))] <- 5 a #>                val #>  0 0 0 0 1  =    1 #>  0 0 0 1 0  =    1 #>  0 0 1 0 0  =    1 #>  0 1 0 0 0  =    1 #>  1 0 0 0 0  =    1 #>  1 1 1 1 1  =    5  a[3,4,5,3,1]  # the NULL polynomial #> empty sparse array with 5 columns  a[0,1,0,0,0] #>                val #>  0 1 0 0 0  =    1 a[0,1,0,0,0,drop=TRUE] #> [1] 1  a[2,3:5,4,3,3] <- 9 a #>                val #>  0 0 0 0 1  =    1 #>  0 0 0 1 0  =    1 #>  2 3 4 3 3  =    9 #>  0 0 1 0 0  =    1 #>  0 1 0 0 0  =    1 #>  1 0 0 0 0  =    1 #>  1 1 1 1 1  =    5 #>  2 4 4 3 3  =    9 #>  2 5 4 3 3  =    9  options(polyform = TRUE)   # print as a multivariate polynomial a #> +x5 +x4 +9*x1^2*x2^3*x3^4*x4^3*x5^3 +x3 +x2 +x1 +5*x1*x2*x3*x4*x5 #> +9*x1^2*x2^4*x3^4*x4^3*x5^3 +9*x1^2*x2^5*x3^4*x4^3*x5^3  options(polyform = FALSE)  # print in sparse array form a #>                val #>  0 0 0 0 1  =    1 #>  0 0 0 1 0  =    1 #>  2 3 4 3 3  =    9 #>  0 0 1 0 0  =    1 #>  0 1 0 0 0  =    1 #>  1 0 0 0 0  =    1 #>  1 1 1 1 1  =    5 #>  2 4 4 3 3  =    9 #>  2 5 4 3 3  =    9  (S1 <- spray(diag(5),1:5)) #>                val #>  0 0 0 0 1  =    5 #>  0 0 0 1 0  =    4 #>  0 0 1 0 0  =    3 #>  0 1 0 0 0  =    2 #>  1 0 0 0 0  =    1 (S2 <- spray(1-diag(5),11:15)) #>                val #>  1 1 1 1 0  =   15 #>  1 1 0 1 1  =   13 #>  1 1 1 0 1  =   14 #>  1 0 1 1 1  =   12 #>  0 1 1 1 1  =   11 (S3 <- spray(rbind(c(1,0,0,0,0),c(1,2,1,1,1)))) #>                val #>  1 2 1 1 1  =    1 #>  1 0 0 0 0  =    1  S1[] <- 3 S1[] <- S2  S1[S3] <- 99 S1 #>                val #>  1 0 0 0 0  =   99 #>  1 0 1 1 1  =   12 #>  1 1 1 0 1  =   14 #>  0 1 0 0 0  =    3 #>  0 0 1 0 0  =    3 #>  1 1 1 1 0  =   15 #>  0 0 0 1 0  =    3 #>  0 0 0 0 1  =    3 #>  0 1 1 1 1  =   11 #>  1 1 0 1 1  =   13 #>  1 2 1 1 1  =   99  S <- rspray() S[coeffs(S) > 4] #>            val #>  1 2 0  =    5 #>  2 0 0  =    6 #>  2 1 1  =   15 #>  1 2 2  =    9 S[coeffs(S) < 6] <- 99 S #>            val #>  0 0 2  =   99 #>  2 0 1  =   99 #>  2 0 2  =   99 #>  0 2 0  =   99 #>  1 2 0  =   99 #>  2 0 0  =    6 #>  2 1 1  =   15 #>  1 2 2  =    9"},{"path":"https://robinhankin.github.io/spray/reference/Ops.spray.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Ops Group Methods for sprays — Ops.spray","title":"Arithmetic Ops Group Methods for sprays — Ops.spray","text":"Allows arithmetic operators used spray calculations,   addition, multiplication, division, integer powers, etc.   Objects class spray interpreted sparse multivariate polynomials.","code":""},{"path":"https://robinhankin.github.io/spray/reference/Ops.spray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Ops Group Methods for sprays — Ops.spray","text":"","code":"# S3 method for class 'spray' Ops(e1, e2 = NULL) spray_negative(S) spray_times_spray(S1,S2) spray_times_scalar(S,x) spray_plus_spray(S1,S2) spray_plus_scalar(S,x) spray_power_scalar(S,n) spray_power_scalar_stla(S,n) spray_eq_spray(S1,S2) spray_eq_numeric(S1,x)"},{"path":"https://robinhankin.github.io/spray/reference/Ops.spray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Ops Group Methods for sprays — Ops.spray","text":"e1,e2,S,S1,S2 Objects class spray, interpreted     sparse multivariate polynomials x Real valued scalar n Non-negative integer","code":""},{"path":"https://robinhankin.github.io/spray/reference/Ops.spray.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic Ops Group Methods for sprays — Ops.spray","text":"function Ops.spray() passes unary binary arithmetic   operators (“+”, “-”, “*”,   “/”,“==”, “^”)   appropriate specialist function. interesting operators “*”   “+” execute multivariate polynomial multiplication   addition respectively. Testing equality uses spray_eq_spray().  Note   spray_eq_spray(S1,S2) algebraically equivalent   .zero(S1-S2), faster (FALSE returned soon   mismatch found). Function spray_power_scalar() functional representation   powers: spray_power_scalar(X,n) X^n.   Function spray_power_scalar_stla() experimental   replacement spray_power_scalar() may offer speed   advantages.","code":""},{"path":"https://robinhankin.github.io/spray/reference/Ops.spray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Ops Group Methods for sprays — Ops.spray","text":"functions return spray objects except  “==”, returns logical.","code":""},{"path":"https://robinhankin.github.io/spray/reference/Ops.spray.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arithmetic Ops Group Methods for sprays — Ops.spray","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/Ops.spray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic Ops Group Methods for sprays — Ops.spray","text":"","code":"M <- matrix(sample(0:3,21,replace=TRUE),ncol=3) a <- spray(M,sample(7)) b <- homog(3,4)   # arithmetic operators mostly work as expected: a + 2*b #>            val #>  1 2 1  =    2 #>  0 2 2  =    2 #>  1 1 2  =    2 #>  1 0 3  =    2 #>  0 3 1  =    2 #>  0 0 4  =    2 #>  2 2 2  =    6 #>  1 0 0  =    3 #>  2 0 2  =    2 #>  0 4 0  =    2 #>  4 0 0  =    2 #>  3 0 1  =    2 #>  1 3 0  =    2 #>  3 2 1  =    1 #>  2 2 0  =    2 #>  3 1 0  =    2 #>  0 1 3  =    2 #>  1 1 3  =    4 #>  0 0 0  =    7 #>  2 1 1  =    7 #>  3 3 3  =    2 a - a*b^2/4 #>                  vala+b #>            val #>  3 1 0  =    1 #>  2 2 0  =    1 #>  1 2 1  =    1 #>  0 2 2  =    1 #>  1 3 0  =    1 #>  0 0 4  =    1 #>  2 2 2  =    6 #>  1 0 0  =    3 #>  1 1 2  =    1 #>  1 0 3  =    1 #>  0 3 1  =    1 #>  2 0 2  =    1 #>  0 4 0  =    1 #>  4 0 0  =    1 #>  3 0 1  =    1 #>  3 2 1  =    1 #>  1 1 3  =    4 #>  0 0 0  =    7 #>  0 1 3  =    1 #>  2 1 1  =    6 #>  3 3 3  =    2  S1 <- spray(partitions::compositions(4,3)) S2 <- spray(diag(3))  # S2 = x+y+z   stopifnot( (S1+S2)^3 == S1^3 + 3*S1^2*S2 + 3*S1*S2^2 + S2^3 )"},{"path":"https://robinhankin.github.io/spray/reference/arity.html","id":null,"dir":"Reference","previous_headings":"","what":"The arity of a spray object — arity","title":"The arity of a spray object — arity","text":"arity spray object: number indices needed retrieve entry, number columns index matrix.","code":""},{"path":"https://robinhankin.github.io/spray/reference/arity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The arity of a spray object — arity","text":"","code":"arity(S)"},{"path":"https://robinhankin.github.io/spray/reference/arity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The arity of a spray object — arity","text":"S spray object","code":""},{"path":"https://robinhankin.github.io/spray/reference/arity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The arity of a spray object — arity","text":"Returns integer","code":""},{"path":"https://robinhankin.github.io/spray/reference/arity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The arity of a spray object — arity","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/arity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The arity of a spray object — arity","text":"","code":"(a <- rspray()) #>            val #>  1 1 1  =    9 #>  2 0 2  =    6 #>  2 1 0  =   13 #>  1 2 1  =    7 #>  0 1 0  =    4 #>  0 2 1  =    3 #>  1 1 0  =    2 #>  2 2 2  =    1 arity(a) #> [1] 3"},{"path":"https://robinhankin.github.io/spray/reference/as.array.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce spray objects to arrays — as.array","title":"Coerce spray objects to arrays — as.array","text":"Coerces spray objects arrays.  Includes --one functionality via option offbyone.","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce spray objects to arrays — as.array","text":"","code":"# S3 method for class 'spray' as.array(x, offbyone=FALSE, compact=FALSE, ...) # S3 method for class 'spray' dim(x)"},{"path":"https://robinhankin.github.io/spray/reference/as.array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce spray objects to arrays — as.array","text":"x spray object offbyone Boolean default FALSE meaning interpret     index entries positions dimension, TRUE     meaning add one index values zero entries appear     first place compact Boolean default FALSE meaning translate     spray , TRUE meaning add constants     column index matrix resulting array small     possible ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce spray objects to arrays — as.array","text":"Argument offbyone defaults FALSE; set   TRUE, effectively adds one index matrix, zero   entry index matrix means first position dimension. subtraction, performed, function operate   index less 1.","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce spray objects to arrays — as.array","text":"Returns array dimension dim(S).  “meat”   function ","code":"out <- array(0, dS)     out[ind] <- coeffs(S)"},{"path":"https://robinhankin.github.io/spray/reference/as.array.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce spray objects to arrays — as.array","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce spray objects to arrays — as.array","text":"","code":"(M <- matrix(sample(0:4,28,replace=TRUE),ncol=4)) #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    1    2 #> [2,]    3    4    4    0 #> [3,]    1    0    2    2 #> [4,]    3    4    0    4 #> [5,]    4    0    3    4 #> [6,]    2    0    1    4 #> [7,]    3    4    0    0 (S <- spray(M,sample(7),addrepeats=TRUE)) #>              val #>  3 4 0 0  =    1 #>  2 0 1 4  =    4 #>  3 4 0 4  =    2 #>  4 0 3 4  =    6 #>  1 0 2 2  =    7 #>  3 4 4 0  =    3 #>  1 0 1 2  =    5 as.array(S,offbyone=TRUE)      # a large object!  sprays are terse #> , , 1, 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    0    0 #>  #> , , 2, 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 3, 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 4, 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 5, 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    3 #> [5,]    0    0    0    0    0 #>  #> , , 1, 2 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 2, 2 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 3, 2 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 4, 2 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 5, 2 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 1, 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 2, 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    5    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 3, 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    7    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 4, 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 5, 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 1, 4 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 2, 4 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 3, 4 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 4, 4 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 5, 4 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 1, 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    2 #> [5,]    0    0    0    0    0 #>  #> , , 2, 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    4    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 3, 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> , , 4, 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    6    0    0    0    0 #>  #> , , 5, 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>    S <- spray(matrix(sample(1:4,28,replace=TRUE),ncol=4),sample(7)) A <- as.array(S)   # S has no zero indices [if it did, we would need to use offbyone=TRUE]  stopifnot(all(S[index(S),drop=TRUE] == A[index(S)]))"},{"path":"https://robinhankin.github.io/spray/reference/as.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce spray objects to character — as.character","title":"Coerce spray objects to character — as.character","text":"Coerces spray objects character string disord character vector.","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce spray objects to character — as.character","text":"","code":"# S3 method for class 'spray' as.character(x, ..., split=FALSE)"},{"path":"https://robinhankin.github.io/spray/reference/as.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce spray objects to character — as.character","text":"x spray object ... arguments, currently ignored split Boolean default FALSE meaning return     length-one character vector, TRUE meaning return     disord object elements terms, coerced     character","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.character.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce spray objects to character — as.character","text":"method uses print_spray_polyform() sensitive   option sprayvars, polyform.","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.character.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce spray objects to character — as.character","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce spray objects to character — as.character","text":"","code":"as.character(rspray()) #> [1] \"+9*x*z +8*x*y^2 +5*x*y*z +7*y +4*y^2 +6*x^2*z^2 +3*x*z^2 +2*z^2 +x*y\" as.character(rspray(),split=TRUE) #> A disord object with hash e08925c7c502c88136049306d162ba12065e5c46 and elements #> [1] \"+8*x^2*y\"       \"+6*y^2*z\"       \"+14*x^2*y^2*z\"  \"+4*x^2*y^2*z^2\" #> [5] \"+7*y^2\"         \"+3*z\"           \"+2*x^2*z^2\"     \"+y^2*z^2\"       #> (in some order)"},{"path":"https://robinhankin.github.io/spray/reference/as.function.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a spray object to a function — as.function.spray","title":"Coerce a spray object to a function — as.function.spray","text":"Coerce spray object function","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a spray object to a function — as.function.spray","text":"","code":"# S3 method for class 'spray' as.function(x,...)"},{"path":"https://robinhankin.github.io/spray/reference/as.function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a spray object to a function — as.function.spray","text":"x spray object, interpreted multivariate polynomial ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a spray object to a function — as.function.spray","text":"Returns function; function returns numeric vector.","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.function.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce a spray object to a function — as.function.spray","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.function.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce a spray object to a function — as.function.spray","text":"Coercion possible even indices zero negative.  function vectorized arity argument.","code":""},{"path":"https://robinhankin.github.io/spray/reference/as.function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a spray object to a function — as.function.spray","text":"","code":"(S <- spray(matrix(1:6,3,2),1:3)) #>          val #>  3 6  =    3 #>  2 5  =    2 #>  1 4  =    1 (f <- as.function(S)) #> function (X)  #> { #>     if (!is.matrix(X)) { #>         X <- rbind(X) #>     } #>     stopifnot(ncol(X) == arity(x)) #>     jj <- matrix(1, nrow(X), nrow(index(x))) #>     for (i in seq_len(arity(x))) { #>         jj <- jj * outer(X[, i], index(x)[, i], \"^\") #>     } #>     return(rowSums(sweep(jj, 2, coeffs(x), \"*\"))) #> } #> <bytecode: 0x561fae1bd820> #> <environment: 0x561fae1ae5b0> f(2:3) == 3*2^3*3^6 + 2*2^2*3^5 + 1*2^1*3^4  # should be TRUE #>    X  #> TRUE    S1 <- spray(matrix(sample(-2:2,replace=TRUE,21),ncol=3),rnorm(7),addrepeats=TRUE) S2 <- spray(matrix(sample(-2:2,replace=TRUE,15),ncol=3),rnorm(5),addrepeats=TRUE)  f1 <- as.function(S1) f2 <- as.function(S2)  f3 <- as.function(S1*S2)   x <- 4:6  f1(x)*f2(x)-f3(x)  # should be zero #> X  #> 0     # coercion is vectorized:  f1(matrix(1:33,ncol=3)) #>  [1]  -72.89297  -80.68018  -90.15020 -100.28045 -110.94692 -122.11887 #>  [7] -133.78536 -145.94145 -158.58447 -171.71275 -185.32516"},{"path":"https://robinhankin.github.io/spray/reference/asum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum over dimension margins — asum","title":"Sum over dimension margins — asum","text":"Sum specified dimension margins.","code":""},{"path":"https://robinhankin.github.io/spray/reference/asum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum over dimension margins — asum","text":"","code":"# S3 method for class 'spray' asum(S, dims, drop=TRUE, ...) asum_inverted(S, dims) process_dimensions(S,dims)"},{"path":"https://robinhankin.github.io/spray/reference/asum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum over dimension margins — asum","text":"S spray object dims Vector strictly positive integers corresponding     dimensions summed drop Boolean, default TRUE meaning drop     summed dimensions, FALSE meaning retain . ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/spray/reference/asum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sum over dimension margins — asum","text":"Function asum.spray() method asum().  takes spray, vector integers corresponding dimensions summed . Function asum_inverted() , takes vector integers corresponding dimensions sum .  function  nice C++ idiom . Function process_dimensions() ensures dims argument consistent spray S returns cleaned version thereof.","code":""},{"path":"https://robinhankin.github.io/spray/reference/asum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum over dimension margins — asum","text":"Returns spray object.","code":""},{"path":"https://robinhankin.github.io/spray/reference/asum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sum over dimension margins — asum","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/asum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum over dimension margins — asum","text":"","code":"S <- spray(matrix(sample(0:2,60,replace=TRUE),ncol=3),addrepeats=TRUE) S #>            val #>  0 1 1  =    1 #>  0 2 1  =    2 #>  1 2 0  =    2 #>  0 0 1  =    1 #>  1 1 0  =    3 #>  2 2 2  =    1 #>  2 1 2  =    1 #>  1 0 2  =    1 #>  2 1 0  =    1 #>  0 1 0  =    2 #>  2 0 1  =    1 #>  0 2 2  =    1 #>  2 2 1  =    1 #>  1 1 2  =    2  asum(S,1) #>          val #>  0 2  =    1 #>  1 2  =    3 #>  2 2  =    2 #>  1 0  =    6 #>  0 1  =    2 #>  2 0  =    2 #>  2 1  =    3 #>  1 1  =    1 asum(S,1:2) #>        val #>  2  =    6 #>  0  =    8 #>  1  =    6  asum(S,1:2,drop=FALSE) #>            val #>  0 0 1  =    6 #>  0 0 0  =    8 #>  0 0 2  =    6   asum(S,c(1,3)) == asum_inverted(S,2) #> [1] TRUE"},{"path":"https://robinhankin.github.io/spray/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the constant term of a spray object — constant","title":"Get or set the constant term of a spray object — constant","text":"constant term spray object coefficient corresponding index zeros.  functions get set constant spray object.","code":""},{"path":"https://robinhankin.github.io/spray/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the constant term of a spray object — constant","text":"","code":"is.constant(x) constant(x,drop=FALSE) constant(x) <- value drop(x)"},{"path":"https://robinhankin.github.io/spray/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the constant term of a spray object — constant","text":"x Object class spray value Numeric value set constant coefficient drop Boolean, default FALSE meaning return     spray object TRUE meaning return numeric value","code":""},{"path":"https://robinhankin.github.io/spray/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the constant term of a spray object — constant","text":"function constant(), return coefficient, constant   multivariate polynomial, depending value drop.","code":""},{"path":"https://robinhankin.github.io/spray/reference/constant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get or set the constant term of a spray object — constant","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/constant.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get or set the constant term of a spray object — constant","text":"behaviour drop argument (sort ) matches spray extractor method.  Function drop() returns elements coefficients. Function constant() ensures zero spray objects retain argument's arity. might better call .constant() .scalar(), consistency stokes clifford packages.  clear.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the constant term of a spray object — constant","text":"","code":"(S <- spray(partitions::blockparts(rep(2,3),3,TRUE))) #>            val #>  0 1 2  =    1 #>  1 0 2  =    1 #>  0 0 2  =    1 #>  0 2 1  =    1 #>  2 0 0  =    1 #>  0 2 0  =    1 #>  0 0 1  =    1 #>  0 0 0  =    1 #>  1 1 0  =    1 #>  2 1 0  =    1 #>  1 2 0  =    1 #>  1 0 1  =    1 #>  0 1 0  =    1 #>  2 0 1  =    1 #>  0 1 1  =    1 #>  1 0 0  =    1 #>  1 1 1  =    1  constant(S) #>            val #>  0 0 0  =    1 constant(S) <- 33  S #>            val #>  1 1 0  =    1 #>  0 0 0  =   33 #>  0 1 0  =    1 #>  2 0 1  =    1 #>  1 1 1  =    1 #>  1 0 0  =    1 #>  0 1 2  =    1 #>  2 0 0  =    1 #>  0 1 1  =    1 #>  1 0 2  =    1 #>  0 0 2  =    1 #>  2 1 0  =    1 #>  0 2 1  =    1 #>  1 2 0  =    1 #>  1 0 1  =    1 #>  0 2 0  =    1 #>  0 0 1  =    1  drop(constant(S,drop=FALSE)) #> [1] 33"},{"path":"https://robinhankin.github.io/spray/reference/deriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial differentiation of spray objects — deriv","title":"Partial differentiation of spray objects — deriv","text":"Partial differentiation spray objects interpreted multivariate   polynomials","code":""},{"path":"https://robinhankin.github.io/spray/reference/deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial differentiation of spray objects — deriv","text":"","code":"# S3 method for class 'spray' deriv(expr, i , derivative = 1, ...) aderiv(S,orders)"},{"path":"https://robinhankin.github.io/spray/reference/deriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial differentiation of spray objects — deriv","text":"expr spray object, interpreted multivariate polynomial Dimension differentiate respect derivative many times differentiate ... arguments, currently ignored S spray object orders orders differentials","code":""},{"path":"https://robinhankin.github.io/spray/reference/deriv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial differentiation of spray objects — deriv","text":"Function deriv.spray() method generic spray(); S spray object, spray(S,,n) returns \\(\\partial^n S/\\partial x_i^n = S^{\\left(x_i,\\ldots,x_i\\right)}\\). Function aderiv() generalized derivative; S spray arity 3, aderiv(S,c(,j,k)) returns \\(\\frac{\\partial^{+j+k} S}{\\partial x_1^\\partial x_2^j\\partial x_3^k}\\).","code":""},{"path":"https://robinhankin.github.io/spray/reference/deriv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial differentiation of spray objects — deriv","text":"functions return spray object.","code":""},{"path":"https://robinhankin.github.io/spray/reference/deriv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Partial differentiation of spray objects — deriv","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/deriv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial differentiation of spray objects — deriv","text":"","code":"(S <- spray(matrix(sample(-2:2,15,replace=TRUE),ncol=3),addrepeats=TRUE)) #>               val #>   0  0  2  =    1 #>   2  1  1  =    1 #>  -2 -1  1  =    1 #>  -1 -1 -1  =    1 #>   2  1 -1  =    1  deriv(S,1) #>               val #>   1  1  1  =    2 #>  -3 -1  1  =   -2 #>  -2 -1 -1  =   -1 #>   1  1 -1  =    2 deriv(S,2,2) #>               val #>  -2 -3  1  =    2 #>  -1 -3 -1  =    2  # differentiation is invariant under order: aderiv(S,1:3) == deriv(deriv(deriv(S,1,1),2,2),3,3) #> [1] TRUE  # Leibniz's rule: S1 <- spray(matrix(sample(0:3,replace=TRUE,21),ncol=3),sample(7),addrepeats=TRUE) S2 <- spray(matrix(sample(0:3,replace=TRUE,15),ncol=3),sample(5),addrepeats=TRUE)  S1*deriv(S2,1) + deriv(S1,1)*S2 == deriv(S1*S2,1) #> [1] TRUE  # Generalized Leibniz: aderiv(S1*S2,c(1,1,0)) == ( aderiv(S1,c(0,0,0))*aderiv(S2,c(1,1,0)) + aderiv(S1,c(0,1,0))*aderiv(S2,c(1,0,0)) + aderiv(S1,c(1,0,0))*aderiv(S2,c(0,1,0)) + aderiv(S1,c(1,1,0))*aderiv(S2,c(0,0,0))  ) #> [1] TRUE"},{"path":"https://robinhankin.github.io/spray/reference/homog.html","id":null,"dir":"Reference","previous_headings":"","what":"Various functions to create simple spray objects — homog","title":"Various functions to create simple spray objects — homog","text":"Various functions create simple spray objects single-term, homogeneous, constant multivariate polynomials.","code":""},{"path":"https://robinhankin.github.io/spray/reference/homog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various functions to create simple spray objects — homog","text":"","code":"product(power) homog(d,power=1) linear(x,power=1) lone(n,d=n) one(d) as.id(S) xyz(d)"},{"path":"https://robinhankin.github.io/spray/reference/homog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various functions to create simple spray objects — homog","text":"d integer; generally, dimension arity resulting spray object power Integer vector powers x Numeric vector coefficients S spray object n function lone(), term raise power 1","code":""},{"path":"https://robinhankin.github.io/spray/reference/homog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various functions to create simple spray objects — homog","text":"functions documented return spray object","code":""},{"path":"https://robinhankin.github.io/spray/reference/homog.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Various functions to create simple spray objects — homog","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/homog.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Various functions to create simple spray objects — homog","text":"functions related equivalents multipol package, exactly . Function zero() documented zero.Rd, listed convenience.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/homog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various functions to create simple spray objects — homog","text":"","code":"product(1:3)                   #      x * y^2 * z^3 #>            val #>  1 2 3  =    1 homog(3)                       #      x + y + z #>            val #>  0 0 1  =    1 #>  0 1 0  =    1 #>  1 0 0  =    1 homog(3,2)                     #      x^2  + xy + xz + y^2 + yz + z^2 #>            val #>  0 0 2  =    1 #>  0 1 1  =    1 #>  1 0 1  =    1 #>  0 2 0  =    1 #>  1 1 0  =    1 #>  2 0 0  =    1 linear(1:3)                    #      1*x + 2*y + 3*z #>            val #>  0 0 1  =    3 #>  0 1 0  =    2 #>  1 0 0  =    1 linear(1:3,2)                  #      1*x^2 + 2*y^2 + 3*z^2 #>            val #>  0 0 2  =    3 #>  0 2 0  =    2 #>  2 0 0  =    1 lone(3)                        #      z #>            val #>  0 0 1  =    1 lone(2,3)                      #      y #>            val #>  0 1 0  =    1 one(3)                         #      1 #>            val #>  0 0 0  =    1 zero(3)                        #      0 #> empty sparse array with 3 columns xyz(3)                         #      xyz #>            val #>  1 1 1  =    1"},{"path":"https://robinhankin.github.io/spray/reference/knight.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating function for a chess knight and king — knight","title":"Generating function for a chess knight and king — knight","text":"Generating function chess knight king arbitrarily-dimensioned chessboard","code":""},{"path":"https://robinhankin.github.io/spray/reference/knight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating function for a chess knight and king — knight","text":"","code":"knight(d=2) king(d=2)"},{"path":"https://robinhankin.github.io/spray/reference/knight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating function for a chess knight and king — knight","text":"d Dimensionality board, defaulting 2","code":""},{"path":"https://robinhankin.github.io/spray/reference/knight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating function for a chess knight and king — knight","text":"Returns generating function piece question.","code":""},{"path":"https://robinhankin.github.io/spray/reference/knight.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generating function for a chess knight and king — knight","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/knight.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generating function for a chess knight and king — knight","text":"pieces forced move; option moving, add 1 returned spray.  vignette contains short discussion.","code":""},{"path":"https://robinhankin.github.io/spray/reference/knight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating function for a chess knight and king — knight","text":"","code":"knight()  # default 2D chess board #>            val #>  -1  2  =    1 #>   2 -1  =    1 #>  -2  1  =    1 #>  -1 -2  =    1 #>  -2 -1  =    1 #>   1  2  =    1 #>   1 -2  =    1 #>   2  1  =    1 king()    # ditto #>            val #>   1  1  =    1 #>   0  1  =    1 #>  -1  1  =    1 #>   1  0  =    1 #>  -1  0  =    1 #>   1 -1  =    1 #>   0 -1  =    1 #>  -1 -1  =    1  knight()^2  # generating function for two knight's moves #>            val #>   3  3  =    2 #>  -1 -3  =    2 #>  -1  1  =    2 #>  -2 -4  =    1 #>   3 -3  =    2 #>  -1 -1  =    2 #>  -3 -3  =    2 #>   2 -4  =    1 #>   1 -1  =    2 #>  -1  3  =    2 #>   1 -3  =    2 #>  -3  3  =    2 #>   4 -2  =    1 #>   3  1  =    2 #>  -2  0  =    2 #>   2  4  =    1 #>   3 -1  =    2 #>   0 -4  =    2 #>   0  0  =    8 #>   4  0  =    2 #>  -3  1  =    2 #>   1  3  =    2 #>  -4 -2  =    1 #>   0  2  =    2 #>   4  2  =    1 #>  -3 -1  =    2 #>   1  1  =    2 #>   0  4  =    2 #>  -2  4  =    1 #>   2  0  =    2 #>  -4  0  =    2 #>   0 -2  =    2 #>  -4  2  =    1  ## How many ways can a knight return to its starting square in 6 moves? constant(knight()^6) #>           val #>  0 0  =  5840  ## How many in 6 or fewer? constant((1+knight())^6) #>           val #>  0 0  =  8481  ## Where does a randomly-moving knight end up? d <- xyz(2) kt <- (1+knight())*d^2/9 persp(1:25,1:25,as.array(d*kt^6))    ## what is the probability that a 4D king is a knight's move from ##   (0,0,0,0) after 6 moves?  sum(coeffs(((king(4)/80)^4)[knight(4)])) #> [1] 0.06367969"},{"path":"https://robinhankin.github.io/spray/reference/nterms.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of nonzero terms in a spray object — nterms","title":"Number of nonzero terms in a spray object — nterms","text":"Number nonzero terms spray object","code":""},{"path":"https://robinhankin.github.io/spray/reference/nterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of nonzero terms in a spray object — nterms","text":"","code":"nterms(x) # S3 method for class 'spray' length(x)"},{"path":"https://robinhankin.github.io/spray/reference/nterms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of nonzero terms in a spray object — nterms","text":"x Object class spray","code":""},{"path":"https://robinhankin.github.io/spray/reference/nterms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of nonzero terms in a spray object — nterms","text":"Number nonzero terms spray object.  Function   length() defined seq_along() works   expected","code":""},{"path":"https://robinhankin.github.io/spray/reference/nterms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of nonzero terms in a spray object — nterms","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/nterms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of nonzero terms in a spray object — nterms","text":"","code":"(a <- rspray()) #>            val #>  1 1 1  =    7 #>  1 1 2  =    6 #>  2 1 0  =    9 #>  2 2 0  =   13 #>  2 0 1  =    4 #>  1 0 0  =    3 #>  2 0 0  =    2 #>  0 0 0  =    1 nterms(a) #> [1] 8   seq_along(a) #> [1] 1 2 3 4 5 6 7 8"},{"path":"https://robinhankin.github.io/spray/reference/ooom.html","id":null,"dir":"Reference","previous_headings":"","what":"One-over-one-minus for spray objects — ooom","title":"One-over-one-minus for spray objects — ooom","text":"One--one-minus spray objects; nearest ‘division’ can get.","code":""},{"path":"https://robinhankin.github.io/spray/reference/ooom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-over-one-minus for spray objects — ooom","text":"","code":"ooom(S, n)"},{"path":"https://robinhankin.github.io/spray/reference/ooom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-over-one-minus for spray objects — ooom","text":"S object class spray n Order approximation","code":""},{"path":"https://robinhankin.github.io/spray/reference/ooom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One-over-one-minus for spray objects — ooom","text":"Returns Taylor expansion order \\(n\\) \\(1/(1-S)\\), , \\(1+S+S^2+S^3+\\cdots +S^n\\).","code":""},{"path":"https://robinhankin.github.io/spray/reference/ooom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-over-one-minus for spray objects — ooom","text":"Returns spray object arity S.","code":""},{"path":"https://robinhankin.github.io/spray/reference/ooom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One-over-one-minus for spray objects — ooom","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/ooom.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"One-over-one-minus for spray objects — ooom","text":"Uses Horner's method efficiency","code":""},{"path":"https://robinhankin.github.io/spray/reference/ooom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-over-one-minus for spray objects — ooom","text":"","code":"(x <- spray(matrix(1))) #>        val #>  1  =    1 ooom(x,5)  # 1 + x + x^2 + x^3 + x^4 + x^5 #>        val #>  1  =    1 #>  3  =    1 #>  5  =    1 #>  4  =    1 #>  2  =    1 #>  0  =    1   (a <- homog(4,2)) #>              val #>  0 0 1 1  =    1 #>  0 1 0 1  =    1 #>  0 0 2 0  =    1 #>  0 1 1 0  =    1 #>  0 0 0 2  =    1 #>  1 0 1 0  =    1 #>  1 0 0 1  =    1 #>  1 1 0 0  =    1 #>  0 2 0 0  =    1 #>  2 0 0 0  =    1 d <- (1-a)*ooom(a,3)  constant(d)    # should be 1 #>              val #>  0 0 0 0  =    1 rowSums(index(d))   # a single 0 and lots of 8s. #>   [1] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 #>  [38] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 #>  [75] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 #> [112] 8 8 8 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 #> [149] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"},{"path":"https://robinhankin.github.io/spray/reference/pmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel maxima and minima for sprays — pmax","title":"Parallel maxima and minima for sprays — pmax","text":"Parallel (pairwise) maxima minima sprays.","code":""},{"path":"https://robinhankin.github.io/spray/reference/pmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel maxima and minima for sprays — pmax","text":"","code":"maxpair_spray(S1,S2) minpair_spray(S1,S2) # S3 method for class 'spray' pmax(x, ...) # S3 method for class 'spray' pmin(x, ...)"},{"path":"https://robinhankin.github.io/spray/reference/pmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel maxima and minima for sprays — pmax","text":"x,S1,S2 Spray objects ... spray objects compared","code":""},{"path":"https://robinhankin.github.io/spray/reference/pmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel maxima and minima for sprays — pmax","text":"Function maxpair_spray() finds pairwise maximum two sprays.  Specifically, S3 <- maxpair_spray(S1,S2), S3[v] == max(S1[v],S2[v]) every index vector v. Function pmax.spray() method generic pmax(), takes number arguments.  S3 <- maxpair_spray(S1,S2,...), S3[v] == max(S1[v],S2[v],...) every index vector v. Function pmax.spray() operates right-associatively: pmax(S1,S2,S3,S4) == f(S1,f(S2,f(S3,S4))) f() short maxpair_spray().  performance important, put smallest spray (terms number nonzero entries) last. functions, scalar interpreted sort global maximum. Thus S3 <- pmax(S,x) S3[v] == max(S[v],x) every index v.  Observe operation defined x>0, infinity v S3[v] != 0, impossibility (least counter principles sparse array).  frab package discussses issue vignette inst/wittgenstein.Rmd.  Note also x length \\(>1\\) elements spray object stored arbitrary order, following disordR discipline. Functions minpair_spray() pmin.spray() analogous. Note minpair_spray(S1,S2) algebraically equivalent -pmax_spray(-S1,-S2); see examples. value pmax(S) problematic.  Suppose (coeffs(S)<0); current implementation returns pmax(S)==S case returning null polynomial.","code":""},{"path":"https://robinhankin.github.io/spray/reference/pmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel maxima and minima for sprays — pmax","text":"Returns spray object","code":""},{"path":"https://robinhankin.github.io/spray/reference/pmax.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parallel maxima and minima for sprays — pmax","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/pmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel maxima and minima for sprays — pmax","text":"","code":"S1 <- rspray(100,vals=sample(100)-50) S2 <- rspray(100,vals=sample(100)-50) S3 <- rspray(100,vals=sample(100)-50)   # following comparisons should all be TRUE:  jj <- pmax(S1,S2,S3) jj ==  maxpair_spray(S1,maxpair_spray(S2,S3)) #> [1] TRUE jj ==  maxpair_spray(maxpair_spray(S1,S2),S3) #> [1] TRUE  pmax(S1,S2,S3)  == -pmin(-S1,-S2,-S3) #> [1] TRUE pmin(S1,S2,S3)  == -pmax(-S1,-S2,-S3) #> [1] TRUE  pmax(S1,-Inf) == S1 #> [1] TRUE pmin(S1, Inf) == S2 #> [1] FALSE   pmax(S1,-3) #>            val #>  1 1 2  =   -3 #>  0 0 2  =    6 #>  0 1 0  =   -3 #>  2 0 1  =   -3 #>  0 2 0  =   60 #>  0 0 0  =   85 #>  1 1 0  =   -3 #>  1 2 2  =   -1 #>  0 2 1  =   -3 #>  1 2 0  =   79 #>  1 0 1  =   92 #>  2 2 1  =   -3 #>  0 1 2  =   -3 #>  2 0 0  =   -3 #>  0 1 1  =   63 #>  0 0 1  =   53 #>  0 2 2  =   -3 #>  1 2 1  =   -3 #>  2 1 0  =   84 #>  2 2 0  =   -3 #>  1 0 2  =   40 #>  2 1 1  =   -3 #>  2 1 2  =   32 #>  1 0 0  =   -3 #>  1 1 1  =   -3  if (FALSE) { # \\dontrun{ pmax(S1,3) # not defined } # }"},{"path":"https://robinhankin.github.io/spray/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for spray objects — print.spray","title":"Print methods for spray objects — print.spray","text":"Print methods spray objects options printing matrix form multivariate polynomial form","code":""},{"path":"https://robinhankin.github.io/spray/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for spray objects — print.spray","text":"","code":"# S3 method for class 'spray' print(x, ...) print_spray_matrixform(S) print_spray_polyform(S,give=FALSE) printedvalue(v)"},{"path":"https://robinhankin.github.io/spray/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for spray objects — print.spray","text":"x,S spray object give Boolean, default FALSE meaning print     value S, TRUE meaning return string     (without nice formatting); used .character.spray() v Numeric vector ... arguments (currently ignored)","code":""},{"path":"https://robinhankin.github.io/spray/reference/print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print methods for spray objects — print.spray","text":"print method, print.spray(), dispatches helper functions  print_spray_matrixform() print_spray_polyform()  depending value option polyform; see examples  section. Option sprayvars character vector entries  corresponding variable names printing.  sprayvars  option algebraic significance: affect print  method. Function printedvalue() low-level helper function  takes numeric argument returns value printed (thus  respecting options scipen digits). Note printing spray object (either matrix form polynomial  form) generally takes much longer calculating .","code":""},{"path":"https://robinhankin.github.io/spray/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for spray objects — print.spray","text":"Returns argument invisibly.","code":""},{"path":"https://robinhankin.github.io/spray/reference/print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print methods for spray objects — print.spray","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/print.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Print methods for spray objects — print.spray","text":"couple hard-wired symbols multiplication   equality defined near top helper functions. checks option sprayvars sensible.    example, repeated entries, entries zero length, acceptable   output might confusing uninformative.","code":""},{"path":"https://robinhankin.github.io/spray/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for spray objects — print.spray","text":"","code":"(a <- spray(diag(3))) #>            val #>  0 0 1  =    1 #>  0 1 0  =    1 #>  1 0 0  =    1   options(polyform = FALSE) a^3 #>            val #>  3 0 0  =    1 #>  2 1 0  =    3 #>  2 0 1  =    3 #>  1 2 0  =    3 #>  0 2 1  =    3 #>  0 3 0  =    1 #>  1 0 2  =    3 #>  1 1 1  =    6 #>  0 1 2  =    3 #>  0 0 3  =    1  options(polyform = TRUE) a^3 #> +x^3 +3*x^2*y +3*x^2*z +3*x*y^2 +3*y^2*z +y^3 +3*x*z^2 +6*x*y*z #> +3*y*z^2 +z^3   options(sprayvars=letters) a <- diag(26) spray(a) #> +y +x +v +u +t +q +s +n +a +b +c +d +e +h +f +z +r +g +j +i +o +k +w +p #> +m +l  ## Following example from mpoly: a[1 + cbind(0:25, 1:26) %% 26] <- 2 spray(a) #> +y*z^2 +w*x^2 +a^2*z +u*v^2 +t*u^2 +x*y^2 +s*t^2 +p*q^2 +n*o^2 +a*b^2 #> +r*s^2 +g*h^2 +b*c^2 +q*r^2 +c*d^2 +d*e^2 +f*g^2 +e*f^2 +h*i^2 +m*n^2 #> +i*j^2 +j*k^2 +o*p^2 +k*l^2 +v*w^2 +l*m^2"},{"path":"https://robinhankin.github.io/spray/reference/rspray.html","id":null,"dir":"Reference","previous_headings":"","what":"Random spray objects — rspray","title":"Random spray objects — rspray","text":"Creates random spray objects quick--dirty examples multivariate polynomials","code":""},{"path":"https://robinhankin.github.io/spray/reference/rspray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random spray objects — rspray","text":"","code":"rspray(n=9  , vals = seq_len(n), arity = 3, powers = 0:2) rsprayy(n=30, vals = seq_len(n), arity = 7, powers = 0:8)"},{"path":"https://robinhankin.github.io/spray/reference/rspray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random spray objects — rspray","text":"n Number distinct rows (maximum); repeated rows merged     (argument addrepeats TRUE) vals Values use coefficients arity Arity spray; number columns index matrix powers Set sample entries index matrix","code":""},{"path":"https://robinhankin.github.io/spray/reference/rspray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random spray objects — rspray","text":"Returns spray object","code":""},{"path":"https://robinhankin.github.io/spray/reference/rspray.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random spray objects — rspray","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/rspray.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Random spray objects — rspray","text":"index matrix contains repeated rows, returned spray object contain fewer n entries","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/rspray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random spray objects — rspray","text":"","code":"rspray() #> 6 +8*a^2 +7*a*b +4*a*b^2*c^2 +8*a^2*b^2 +11*a^2*c +a^2*c^2  rspray(4)*rspray(3,rnorm(3)) #> +1.5136697*a^3*b^4*c +6.0565837*a^2*b^2*c^2 +0.7407928*a^2*b^2*c^3 #> +6.1226568*a^2*b^2*c +3.0273394*a^3*b^4 +2.2223784*a*c^4 #> +3.0651379*a*c^3 +0.1359557*a*c^2  rspray(3,arity=7,powers=-2:2)^3 #> +a^-3*b^3*c^-6*d^6*e^6*g^3 +36*a*b^4*c^-5*d^-1*e*g #> +6*a^-2*b^4*c^-5*d^2*e^5*f +9*b^3*c^-6*d^3*e^2*f^-1*g^4 #> +36*a^2*b^5*c^-4*d^-5*f*g^-2 +27*a^3*b^3*c^-6*e^-2*f^-2*g^5 #> +12*a^-1*b^5*c^-4*d^-2*e^4*f^2*g^-3 +8*b^6*c^-3*d^-6*e^3*f^3*g^-6 #> +54*a^4*b^4*c^-5*d^-4*e^-3*f^-1*g^2 +27*a^6*b^3*c^-6*d^-3*e^-6*f^-3*g^6  rspray(1000,vals=rnorm(1000)) #> -4.01327510389639 -9.5018981*b*c^2 -1.3028648*b^2*c^2 #> -3.9635428*a*b^2*c -1.625289*b^2*c +10.4978609*a*b^2*c^2 -1.9603868*b*c #> -7.370476*a*b -0.7462413*a*b^2 -7.9876373*a^2*c^2 -6.6645177*a^2*b*c^2 #> -0.0670641*a^2 +6.4136295*a^2*b -0.0888211*a*c^2 +3.5093108*a^2*b^2 #> +12.5646265*a*b*c^2 +8.1276653*c^2 +2.8431999*a^2*b^2*c^2 -12.943039*a #> +3.3783639*a*b*c -2.2902092*a^2*c +10.0369957*b -2.9588053*c #> +5.4976432*b^2 -15.1088858*a^2*b*c -6.2686196*a*c +4.2958776*a^2*b^2*c"},{"path":"https://robinhankin.github.io/spray/reference/spray-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class “spray” — spray-class","title":"Class “spray” — spray-class","text":"formal S4 class sprays.","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class “spray” — spray-class","text":"Objects can created calls form new(\"spray\",   ...) encouraged.  Use functions spray()  .spray() instead.","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class “spray” — spray-class","text":"index: Index matrix value: Numeric vector holding coefficients","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class “spray” — spray-class","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/spray-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse arrays and multivariate polynomials — spray-package","title":"Sparse arrays and multivariate polynomials — spray-package","text":"Functionality sparse arrays, emphasis interpretation multivariate polynomials.","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse arrays and multivariate polynomials — spray-package","text":"Base R capability dealing arbitrary dimensioned numerical arrays, array class. sparse array type array nonzero elements stored along index vector describing coordinates.  allows efficient storage manipulation base arrays often require storing many zero elements consume computational memory resources. package, sparse arrays represented objects class spray.  use C++ standard template library (STL) map class, keys (unsigned) integer vectors, values floats. One natural application sparse arrays, package written, multivariate polynomials package vignette presents extended discussion.  Note interpretations exist: stokes weyl packages interpret spray objects differential forms elements Weyl algebra respectively.","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse arrays and multivariate polynomials — spray-package","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse arrays and multivariate polynomials — spray-package","text":"","code":"# define a spray using a matrix of indices and a vector of values: M <- matrix(sample(0:3,21,replace=TRUE),ncol=3) a <- spray(M,sample(7)) #> Error in spraymaker(list(M, x), addrepeats = addrepeats): repeated indices; yet argument 'addrepeats' is FALSE  # there are many pre-defined simple sprays: b <- homog(3,4)  # arithmetic operators work: a + 2*b #> Error in eval(expr, envir, enclos): object 'a' not found a - a*b^2/4 #> Error in eval(expr, envir, enclos): object 'a' not found a+b #> Error in eval(expr, envir, enclos): object 'a' not found  #  we can sum over particular dimensions: asum(a+b,1) #> Error in eval(expr, envir, enclos): object 'a' not found  # differentiation is supported: deriv(a^6,2) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'expr' in selecting a method for function 'deriv': object 'a' not found  # extraction and replacement work as expected:  b[1,2,1] #> +a*b^2*c b[1,2,1,drop=TRUE] #> [1] 1  b[diag(3)] <- 3"},{"path":"https://robinhankin.github.io/spray/reference/spray.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse arrays: spray objects — spray","title":"Sparse arrays: spray objects — spray","text":"Create, coerce, test sparse array objects","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse arrays: spray objects — spray","text":"","code":"spray(M, x, addrepeats=FALSE) spraymaker(L, addrepeats=FALSE, arity=ncol(L[[1]])) is.spray(S) as.spray(arg1, arg2, addrepeats=FALSE, offbyone=FALSE) index(S) coeffs(S) coeffs(S) <- value is_valid_spray(L)"},{"path":"https://robinhankin.github.io/spray/reference/spray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse arrays: spray objects — spray","text":"M Integer matrix rows corresponding index positions x Numeric value elements corresponding spray entries S Object tested spray L list, nominally two elements (index matrix value)     tested acceptability coerce class spray arg1,arg2 Various arguments coerced spray addrepeats Boolean, default FALSE meaning check     repeated index rows , found, return error value assignment operator coeffs<-(),     disord object (length-one numeric vector),     coeffs(S) <- x works expected offbyone function .spray(), converting     array.  Argument offbyone Boolean default     FALSE meaning insert array elements positions     corresponding index elements, TRUE meaning add     one arity function spraymaker(), integer specifying     arity (number columns index matrix L[[1]]); ignored     L non-empty.  See details","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse arrays: spray objects — spray","text":"Spray objects sparse arrays interpreted multivariate   polynomials.  can added subtracted; “*”   interpreted polynomial multiplication. create spray object user use spray(),   matrix indices vector values available,   .spray() tries hard Right Thing (tm). Function spraymaker() formal creator function,   written take output C++ routines return   spray object.  reason needs arity argument   C++ sometimes returns NULL (lieu zero-row   matrix, deal ).  case, need way   tell R arity corresponding spray object. Rownames colnames index matrix removed   spraymaker() [C++ routine spray_maker()   discards dimnames attribute matrix M],   print method might add colnames printed output, via option   sprayvars. Functions index() coeffs() accessor methods.   Function index() returns integer-valued matrix rows   corresponding variable powers. extensive vignette available; type   vignette(\"spray\") command line.","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse arrays: spray objects — spray","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sparse arrays: spray objects — spray","text":"Function coeffs() formerly known value(). Technically, index() breaks disordR discipline.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/spray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse arrays: spray objects — spray","text":"","code":"S <- spray(diag(5))    # missing second argument interpreted as '1'. as.array(S,offbyone=TRUE) # zero indices interpreted as ones. #> , , 1, 1, 1 #>  #>      [,1] [,2] #> [1,]    0    1 #> [2,]    1    0 #>  #> , , 2, 1, 1 #>  #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    0 #>  #> , , 1, 2, 1 #>  #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    0 #>  #> , , 2, 2, 1 #>  #>      [,1] [,2] #> [1,]    0    0 #> [2,]    0    0 #>  #> , , 1, 1, 2 #>  #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    0 #>  #> , , 2, 1, 2 #>  #>      [,1] [,2] #> [1,]    0    0 #> [2,]    0    0 #>  #> , , 1, 2, 2 #>  #>      [,1] [,2] #> [1,]    0    0 #> [2,]    0    0 #>  #> , , 2, 2, 2 #>  #>      [,1] [,2] #> [1,]    0    0 #> [2,]    0    0 #>   M <- matrix(1:5,6,5) # note first row matches the sixth row  if (FALSE)  spray(M,1:6)  # \\dontrun{} # will not work because addrepeats is not TRUE   spray(M,1:6,addrepeats=TRUE)  # 7=1:6  #> +5*a^5*b*c^2*d^3*e^4 +3*a^3*b^4*c^5*d*e^2 +2*a^2*b^3*c^4*d^5*e #> +4*a^4*b^5*c*d^2*e^3 +7*a*b^2*c^3*d^4*e^5   S <- spray(matrix(1:7,5,7)) a <- as.array(S)    # will not work if any(M<1) S1 <- as.spray(a) stopifnot(S==S1)  a <- rspray(20) coeffs(a)[coeffs(a) %% 2 == 1] <- 99  # every odd coefficient -> 99"},{"path":"https://robinhankin.github.io/spray/reference/spray_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Low-level functions that call C++ source code — spray_cpp","title":"Low-level functions that call C++ source code — spray_cpp","text":"Low-level functions call C++ source code, detailed automatically generated RcppExports.R file.","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low-level functions that call C++ source code — spray_cpp","text":"","code":"spray_maker(M, d) spray_add(M1, d1, M2, d2) spray_mult(M1, d1, M2, d2) spray_overwrite(M1, d1, M2, d2) spray_accessor(M, d, Mindex) spray_setter(M1, d1, M2, d2) spray_equality(M1, d1, M2, d2) spray_asum_include(M,d,n) spray_asum_exclude(M,d,n) spray_deriv(M,d,n) spray_pmax(M1,d1,M2,d2) spray_pmin(M1,d1,M2,d2) spray_power(M,d,pow) spray_spray_accessor() spray_spray_add() spray_spray_asum_exclude() spray_spray_asum_include() spray_spray_deriv() spray_spray_equality() spray_spray_maker() spray_spray_mult() spray_spray_overwrite() spray_spray_pmax() spray_spray_pmin() spray_spray_setter() spray_spray_power()"},{"path":"https://robinhankin.github.io/spray/reference/spray_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low-level functions that call C++ source code — spray_cpp","text":"M,M1,M2,Mindex Integer valued matrices rows corresponding     array indices d,d1,d2 Vector values corresponding nonzero array     entries n Integer vector corresponding dimensions sum     sum functions pow Nonnegative integer spray_power()","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low-level functions that call C++ source code — spray_cpp","text":"functions return two-element list coerced object class spray  function spraymaker().","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray_cpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Low-level functions that call C++ source code — spray_cpp","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray_cpp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Low-level functions that call C++ source code — spray_cpp","text":"functions really designed end-user. Function spray_equality() simply check equality   $value order index rows specified   spray object.  Function spray_crush() removed   redundant.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/spray_missing_accessor.html","id":null,"dir":"Reference","previous_headings":"","what":"Discussion document — spray_missing_accessor","title":"Discussion document — spray_missing_accessor","text":"Discussion difficulties implementing idiom like S[1,,5,,] package","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray_missing_accessor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discussion document — spray_missing_accessor","text":"","code":"spray_missing_accessor(S, dots)"},{"path":"https://robinhankin.github.io/spray/reference/spray_missing_accessor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discussion document — spray_missing_accessor","text":"S Object class spray dots arguments","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray_missing_accessor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discussion document — spray_missing_accessor","text":"File inst/missing_accessor.txt presents extended discussion   difficulties implementing idiom like S[1,,5,,]   package.","code":""},{"path":"https://robinhankin.github.io/spray/reference/spray_missing_accessor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Discussion document — spray_missing_accessor","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/spraycross.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross product for spray objects — spraycross","title":"Cross product for spray objects — spraycross","text":"Provides natural cross product spray objects, useful tensors \\(k\\)-forms","code":""},{"path":"https://robinhankin.github.io/spray/reference/spraycross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross product for spray objects — spraycross","text":"","code":"spraycross(S, ...) spraycross2(S1,S2)"},{"path":"https://robinhankin.github.io/spray/reference/spraycross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross product for spray objects — spraycross","text":"S,S1,S2,... spray objects","code":""},{"path":"https://robinhankin.github.io/spray/reference/spraycross.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross product for spray objects — spraycross","text":"Tensor products sprays.  algebraic product sprays interpreted multivariate polynomials.  function used stokes package. Function spraycross2() helper function takes exactly two arguments.  Function spraycross() general function takes number arguments.","code":""},{"path":"https://robinhankin.github.io/spray/reference/spraycross.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross product for spray objects — spraycross","text":"Returns spray object","code":""},{"path":"https://robinhankin.github.io/spray/reference/spraycross.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cross product for spray objects — spraycross","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/spraycross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross product for spray objects — spraycross","text":"","code":"a <- spray(matrix(1:4,2,2),c(2,5)) b <- spray(matrix(c(10,11,12,13),2,2),c(7,11)) a #> +5*a^2*b^4 +2*a*b^3 b #> +11*a^11*b^13 +7*a^10*b^12 spraycross2(a,b) #> +14*a*b^3*c^10*d^12 +22*a*b^3*c^11*d^13 +35*a^2*b^4*c^10*d^12 #> +55*a^2*b^4*c^11*d^13 spraycross2(b,a) #> +14*a^10*b^12*c*d^3 +22*a^11*b^13*c*d^3 +35*a^10*b^12*c^2*d^4 #> +55*a^11*b^13*c^2*d^4  spraycross(a,b,b) #> +242*a*b^3*c^11*d^13*e^11*f^13 +605*a^2*b^4*c^11*d^13*e^11*f^13 #> +154*a*b^3*c^10*d^12*e^11*f^13 +385*a^2*b^4*c^10*d^12*e^11*f^13 #> +154*a*b^3*c^11*d^13*e^10*f^12 +385*a^2*b^4*c^11*d^13*e^10*f^12 #> +98*a*b^3*c^10*d^12*e^10*f^12 +245*a^2*b^4*c^10*d^12*e^10*f^12"},{"path":"https://robinhankin.github.io/spray/reference/subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute values into a spray object — subs","title":"Substitute values into a spray object — subs","text":"Substitute values spray object, interpreted multivariate polynomial","code":""},{"path":"https://robinhankin.github.io/spray/reference/subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute values into a spray object — subs","text":"","code":"subs(S, dims, x, drop=TRUE)"},{"path":"https://robinhankin.github.io/spray/reference/subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute values into a spray object — subs","text":"S spray object dims Integer logical vector entries corresponding     dimensions substituted x Numeric vector values substituted drop Boolean, default TRUE meaning return     drop() result, FALSE meaning return     spray object consistently","code":""},{"path":"https://robinhankin.github.io/spray/reference/subs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Substitute values into a spray object — subs","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/subs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Substitute values into a spray object — subs","text":"much easier argument dims sorted increasing order.  , caveat emptor!","code":""},{"path":[]},{"path":"https://robinhankin.github.io/spray/reference/subs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute values into a spray object — subs","text":"","code":"(S <- spray(matrix(sample(0:3,60,replace=TRUE),nrow=12))) #> +a^2*b^2*c*d*e +a^2*b^3*c^3*d^3*e +a*b^2*d +a^2*b^2*c^2*d^3*e^3 #> +a^2*b^2*c^3*d*e +a^2*b^2*c^2*d^2 +a^2*c^3 +a^2*b*c^2 +a^2*b*e^2 #> +a^3*c^2*d^3*e^2 +a^3*b^2*d^3 +a*b*c*d*e  subs(S,c(2,5),1:2) #> +a^3*c^3 +a^2*b^2 +4*a^3*b^2*c^3 +4*a^2 +a^2*b^3 +a^2*b^2*c^2 +2*a*b*c #> +2*a^2*b^3*c +8*a^2*b^2*c^3 +a*c +2*a^2*b^3*c^3 +2*a^2*b*c  P <- homog(3,3) subs(P,1,2) #> 8 +a^3 +2*b^2 +2*a^2 +4*b +a^2*b +2*a*b +a*b^2 +4*a +b^3"},{"path":"https://robinhankin.github.io/spray/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summaries of spray objects — summary.spray","title":"Summaries of spray objects — summary.spray","text":"summary method spray objects, print method summaries.","code":""},{"path":"https://robinhankin.github.io/spray/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summaries of spray objects — summary.spray","text":"","code":"# S3 method for class 'spray' summary(object, ...) # S3 method for class 'summary.spray' print(x, ...)"},{"path":"https://robinhankin.github.io/spray/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summaries of spray objects — summary.spray","text":"object,x Object class spray ... arguments, passed head()","code":""},{"path":"https://robinhankin.github.io/spray/reference/summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summaries of spray objects — summary.spray","text":"summary.spray object summary spray object   x: list first element summary()   coefficients (disord object), second   spray object comprising selected index-coefficient   pairs.  selection done head().","code":""},{"path":"https://robinhankin.github.io/spray/reference/summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summaries of spray objects — summary.spray","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/summary.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Summaries of spray objects — summary.spray","text":"“representative selection” impementation-specific,   uses disordR::elements() extract rows index matrix   coefficients.","code":""},{"path":"https://robinhankin.github.io/spray/reference/summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summaries of spray objects — summary.spray","text":"","code":"a <- rspray()^2 a #> +48*a^3*b^3*c +54*a^2*b^2*c^2 +16*a^4*b^4*c^2 +16*a^4*b^4*c^3 #> +54*a*b^2*c^2 +8*a^4*b^3*c^3 +25*b^2*c^2 +60*a*b^2*c +30*a*b^2*c^3 #> +126*b^3*c +228*a*b^3*c +40*a^3*b^3*c^3 +81*b^2 +64*a^3*b^4*c^2 #> +12*a^3*b^3*c^4 +12*a^3*b^2*c^2 +9*a^2*b^2*c^4 +168*a^2*b^3*c #> +49*b^4*c^2 +24*a^3*b^3*c^2 +36*a^2*b^2 +82*a^2*b^3*c^3 +4*a^4*b^4*c^4 #> +28*a^2*b^4*c^3 +a^4*b^2*c^4 +90*b^2*c +76*a^2*b^3*c^2 +32*a^3*b^4*c^3 #> +120*a^2*b^4*c^2 +10*a^2*b^2*c^3 +4*a^4*b^3*c^4 +80*a*b^3*c^2 #> +6*a^3*b^2*c^4 +112*a*b^4*c^2 +70*b^3*c^2 +42*a*b^3*c^3 +108*a*b^2 summary(a) #> A spray object.  Summary of coefficients:  #>  #> a disord object with hash 9082ecf5d90ad95671e126c91d11c8790b8e3ea1  #>  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    1.00   16.00   42.00   54.73   80.00  228.00  #>  #>  #> Representative selection of index and coefficients: #>  #> +8*a^4*b^3*c^3 +54*a*b^2*c^2 +16*a^4*b^4*c^3 +16*a^4*b^4*c^2 #> +54*a^2*b^2*c^2 +48*a^3*b^3*c summary(a,2) #> A spray object.  Summary of coefficients:  #>  #> a disord object with hash 9082ecf5d90ad95671e126c91d11c8790b8e3ea1  #>  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    1.00   16.00   42.00   54.73   80.00  228.00  #>  #>  #> Representative selection of index and coefficients: #>  #> +54*a^2*b^2*c^2 +48*a^3*b^3*c  options(polyform=TRUE) summary(a^4,3) #> A spray object.  Summary of coefficients:  #>  #> a disord object with hash 6010e9e8cf91dea25a7f18505d8941339d9e300f  #>  #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 1.000e+00 1.306e+07 4.912e+08 1.296e+10 7.731e+09 2.268e+11  #>  #>  #> Representative selection of index and coefficients: #>  #> +80994816*a^10*b^9*c^5 +2320109568*a^8*b^10*c^3 +970631424*a^8*b^9*c^4 options(polyform=FALSE) # restore default"},{"path":"https://robinhankin.github.io/spray/reference/zap.html","id":null,"dir":"Reference","previous_headings":"","what":"Zap small values in a spray object — zap","title":"Zap small values in a spray object — zap","text":"Generic version zapsmall()","code":""},{"path":"https://robinhankin.github.io/spray/reference/zap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zap small values in a spray object — zap","text":"","code":"zap(x, digits = getOption(\"digits\")) # S4 method for class 'spray' zapsmall(x, digits = getOption(\"digits\"))"},{"path":"https://robinhankin.github.io/spray/reference/zap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zap small values in a spray object — zap","text":"x spray object digits number digits retain","code":""},{"path":"https://robinhankin.github.io/spray/reference/zap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zap small values in a spray object — zap","text":"Given spray object, coefficients close zero ‘zapped’,   .e., replaced ‘0’, using base::zapsmall().  Function   zap() easily-typed alias; zapsmall()   S4 generic. Note, zap() actually changes numeric value, just   print method.","code":""},{"path":"https://robinhankin.github.io/spray/reference/zap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Zap small values in a spray object — zap","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/spray/reference/zap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zap small values in a spray object — zap","text":"","code":"(S <- spray(matrix(sample(1:50),ncol=2),10^-(1:25))) #>   a  b       val #>   6 31  =  1e-24 #>  10 42  =  1e-22 #>  45 21  =  1e-21 #>  33 13  =  1e-18 #>  24 46  =  1e-16 #>  26  1  =  1e-15 #>   8 22  =  1e-01 #>   7 29  =  1e-19 #>  41 11  =  1e-02 #>  25 43  =  1e-17 #>  23 30  =  1e-09 #>  37 20  =  1e-23 #>   9 14  =  1e-03 #>  40 27  =  1e-25 #>  38 49  =  1e-04 #>  39 48  =  1e-05 #>   2  5  =  1e-11 #>  47 35  =  1e-06 #>  50 34  =  1e-10 #>  12  3  =  1e-07 #>  44 18  =  1e-13 #>  16 32  =  1e-20 #>  28 36  =  1e-08 #>  17 15  =  1e-14 #>  19  4  =  1e-12 zap(S) #>   a  b       val #>  28 36  =  1e-08 #>  12  3  =  1e-07 #>  47 35  =  1e-06 #>  39 48  =  1e-05 #>  38 49  =  1e-04 #>   9 14  =  1e-03 #>  41 11  =  1e-02 #>   8 22  =  1e-01  S-zap(S)        # print method will probably print zeros... #>   a  b       val #>  25 43  =  1e-17 #>  23 30  =  1e-09 #>   7 29  =  1e-19 #>  37 20  =  1e-23 #>  19  4  =  1e-12 #>  17 15  =  1e-14 #>  33 13  =  1e-18 #>  16 32  =  1e-20 #>  24 46  =  1e-16 #>  26  1  =  1e-15 #>  44 18  =  1e-13 #>  50 34  =  1e-10 #>   2  5  =  1e-11 #>  40 27  =  1e-25 #>   6 31  =  1e-24 #>  10 42  =  1e-22 #>  45 21  =  1e-21 coeffs(S-zap(S)) # ...but they are nevertheless nonzero #> A disord object with hash d33d7b193709b7acfd3bda0239b0f3cfcd0d002f and elements #>  [1] 1e-17 1e-09 1e-19 1e-23 1e-12 1e-14 1e-18 1e-20 1e-16 1e-15 1e-13 1e-10 #> [13] 1e-11 1e-25 1e-24 1e-22 1e-21 #> (in some order)"},{"path":"https://robinhankin.github.io/spray/reference/zero.html","id":null,"dir":"Reference","previous_headings":"","what":"The zero polynomial — zero","title":"The zero polynomial — zero","text":"Test zero, empty, polynomial","code":""},{"path":"https://robinhankin.github.io/spray/reference/zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The zero polynomial — zero","text":"","code":"zero(d) is.zero(x) is.empty(L)"},{"path":"https://robinhankin.github.io/spray/reference/zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The zero polynomial — zero","text":"L,x two-element list indices values, possibly spray     object numeric vector d Integer specifying dimensionality spray (arity)","code":""},{"path":"https://robinhankin.github.io/spray/reference/zero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The zero polynomial — zero","text":"Functions .empty() .zero() synonyms.  spray objects interpreted multivariate polynomials, “.zero()” intuitive, sprays interpreted sparse arrays, “.empty()” better (). Passing zero-row index matrix can unexpected effects: , index matrix zero rows (elements) fact five columns retained.  Arguably spray() return error , number rows index matrix match length coefficient vector : index zero rows coefficient vector length 1 (although match returned value).  returned spray object coefficients [specifically, numeric(0)]; consistent index matrix zero rows. Zero coefficients discarded back end: , index matrix given spray() one row coefficient length-one vector element zero.  resulting spray object NULL index matrix [rows zero coefficients removed] NULL coefficient.  also permissible pass zero-row matrix: previous versions package, index matrix returned spray object NULL circumstances.  , arity spray object lost.  probably worth noting spray(), given zero-row index matrix, loses length one coefficients vector, complains length-two coefficient vector:","code":"> dput(spray(matrix(0,0,5),9)) structure(list(structure(numeric(0), .Dim = c(0L, 5L)), numeric(0)), class = \"spray\") > spray(matrix(1,1,5),0) empty sparse array with 5 columns > dput(spray(matrix(1,1,5),0)) structure(list(structure(numeric(0), dim = c(0L, 5L)), numeric(0)), class = \"spray\") spray(matrix(0,0,5),0) empty sparse array with 5 columns     dput(spray(matrix(0,0,5),0)) structure(list(structure(numeric(0), dim = c(0L, 5L)), numeric(0)), class = \"spray\") > dput(spray(matrix(0,0,5),0)) structure(list(structure(numeric(0), dim = c(0L, 5L)), numeric(0)), class = \"spray\") > dput(spray(matrix(0,0,5),3)) structure(list(structure(numeric(0), dim = c(0L, 5L)), numeric(0)), class = \"spray\") > dput(spray(matrix(0,0,5),1:2)) Error in is_valid_spray(L) : nrow(L[[1]]) == length(L[[2]]) is not TRUE > > identical(spray(matrix(0,0,5),0),spray(matrix(0,0,5),3)) [1] TRUE"},{"path":"https://robinhankin.github.io/spray/reference/zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The zero polynomial — zero","text":"","code":"(a <- lone(1,3)) #>  a b c     val #>  1 0 0  =    1  is.zero(a-a)  # should be TRUE #> [1] TRUE  is.zero(zero(6)) #> [1] TRUE  x <- spray(t(0:1)) y <- spray(t(1:0))  is.zero((x+y)*(x-y)-(x^2-y^2)) # TRUE #> [1] TRUE"},{"path":"https://robinhankin.github.io/spray/news/index.html","id":"spray-10-16","dir":"Changelog","previous_headings":"","what":"spray 1.0-16","title":"spray 1.0-16","text":"CRAN release: 2021-11-16 add sticker consistently use coeffs(); return disord object constant() now generic cross products implemented spraycross()","code":""},{"path":"https://robinhankin.github.io/spray/news/index.html","id":"spray-10-17","dir":"Changelog","previous_headings":"","what":"spray 1.0-17","title":"spray 1.0-17","text":"sprayvars option now also governs atrix-form printing drop() function added, following clifford package","code":""},{"path":"https://robinhankin.github.io/spray/news/index.html","id":"spray-10-18","dir":"Changelog","previous_headings":"","what":"spray 1.0-18","title":"spray 1.0-18","text":"CRAN release: 2021-12-15 bug coeffs(x) <- v fixed ==  implemented, also != new generic .id()","code":""},{"path":"https://robinhankin.github.io/spray/news/index.html","id":"spray-10-19","dir":"Changelog","previous_headings":"","what":"spray 1.0-19","title":"spray 1.0-19","text":"CRAN release: 2022-01-17 bugfix getOption(\"max.print\") respected coeffs(S) returns drop()-ped values","code":""},{"path":"https://robinhankin.github.io/spray/news/index.html","id":"spray-10-20","dir":"Changelog","previous_headings":"","what":"spray 1.0-20","title":"spray 1.0-20","text":"CRAN release: 2022-07-05 summary method","code":""},{"path":"https://robinhankin.github.io/spray/news/index.html","id":"spray-10-21","dir":"Changelog","previous_headings":"","what":"spray 1.0-21","title":"spray 1.0-21","text":"consistentification zero objects","code":""},{"path":"https://robinhankin.github.io/spray/news/index.html","id":"spray-10-26","dir":"Changelog","previous_headings":"","what":"spray 1.0-26","title":"spray 1.0-26","text":"bugfixes code conduct contributing guide improvement print method dependence mathjax package","code":""}]
